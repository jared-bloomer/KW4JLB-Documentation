name: Pull Request Docs Check

on: [pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Upgrade pip
      run: |
        # install pip=>20.1 to use "pip cache dir"
        python3 -m pip install --upgrade pip
    
    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: python3 -m pip install -r ./requirements.txt

    - run: mkdocs build
    
    # # Standard drop-in approach that should work for most people.
    # - uses: ammaraskar/sphinx-action@master
    #   with:
    #     docs-folder: "docs/"
    # # Example of using a custom build-command.
    # - uses: ammaraskar/sphinx-action@master
    #   with:
    #     build-command: "sphinx-build -b html . _build"
    #     docs-folder: "docs2/"
    # # Grabbing custom dependencies and building as a pdf.
    # - uses: ammaraskar/sphinx-action@master
    #   with:
    #     pre-build-command: "apt-get update -y && apt-get install -y latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended"
    #     build-command: "make latexpdf"
    #     docs-folder: "docs2/"
    # # Great extra actions to compose with:
    # # Create an artifact of the html output.
    # - uses: actions/upload-artifact@v1
    #   with:
    #     name: DocumentationHTML
    #     path: docs/_build/html/
    # # Create an artifact out of the previously built pdf.
    # - uses: actions/upload-artifact@v1
    #   with:
    #     name: Documentation
    #     path: docs2/_build/latex/pdfexample.pdf
